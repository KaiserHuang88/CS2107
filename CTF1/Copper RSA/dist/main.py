from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes
import sys
sys.setrecursionlimit(2000000)
"""
FLAG = "CS2107{00000000000000000000000000000000000000000}"

assert len(FLAG) == 49

msg = b"THIS FISH IS SO RAW " + bytes(FLAG, 'utf-8') + b" HE'S STILL FINDING NEMO"

msg = bytes_to_long(msg)
msg = 4 * (msg ** 2) + 521 * msg + 47829

e = 3
c_arr = []
n_arr = []

for i in range(5):
    p, q = getPrime(1024), getPrime(1024)
    n = p * q
    c = pow(msg, e, n)
    c_arr.append(c)
    n_arr.append(n)

print(f'c_arr = {c_arr}\nn_arr = {n_arr}')
"""

c1 = 1197923658622146948431520932933901580195890447802860234889912987644865801979752976449748093837161448023366359206941425103410077734660133323377672211907735608916523192298602987546479878356390176500528719619746726547206778573349285925369296858015519668551048675066202132846871450345113335050423160173040324348463738342622852028525842059982165675899198899622642439409565853076767547547904175410455695846233669413092461636182046950039228322859438861732189437539120967366606753483288539633709014055610205642323728399742220107263147764692878514497864691885853330623432130810099483378069119472830471053560246569910607524041
c2 = 14894953606153840193950599398070953884914559657396944210019559761046429132160262496363928938905771662130429584304306525192417016334272482350917962604125835846081586236651212833406808206071805825071475149188249114594049922151439305101641524703763981802799230389810430309503214053236469364092334154286753784940161263440484202936000607318736931354840017636552225864057805350303585450415271424261426394310177162894551669949149923359433457558648420567423321611679158656978666134962340149405388364660224378486582304653462772529142455570349135956477036441459272105128850452028484390200443560805327649566121004475529249586839
c3 = 8988481779158921571770131757270079188884354769386652416786171487611742563903452389478787757686292443216623191212695264960900561690321311603865078038498015072715776953058175491577343809069831050043278587622986130435120547268595844327330787968977265565773049457476068395350307794205923393042505962829498905740568358859368700784791397312608181854450860635147390518719281574821177691300759266965353802500373723560277084101410909912875960439676794602668295877877211960919555014061963524911374995895874779261807509730031755607471079917618351431797296285842755561817567855573437906487590038673378115515267473384425785583962

n1 = 12934799603005928131444541818725262481096750891050836894382614171272597320781296885799473553656398224019437962912819566040406981425294061445006712323749464580122182403113091505671003375325928019254946872967855988083892248971598698881668550066511619838111308289276726660631197622779572865658162150467221592271927196014268298801039251563381147906831681467388706997927566665516645274328061492458261835240704277603175546512000568654054255457297871567727942202955153594021156936011111559456937332095524783349171891519271761497570044773730094287462638703544966319432174177342202729851326561270361752951339534323384667036111
n2 = 18219173425753067251084570638977779783105479954447409566427782693973357769584674314352672246517263144717671598493203956677587647085101016621978198191505030254153381522563917556711729745232047488077913268718088935795063616973190016775270669164163119730835471739568795689266197429131368491527425375480168855250340883185602838878601957558116175458216366444129420116115273403147027438502286652108785632483011289623982461179194762868980448909688791894039819710194462842850194365144808774367217779802925026143675785778294664810591244879737056613667408338338375780327518577301597860885367224463968247913434081586881515488841
n3 = 12848347064257545590427837367437078939341970280326892236059406281251144198177970040408878077733350183634394782666198647679102542610226563316898343048269821580232690557784085487600871031847705681424774628179968901178730569045852914367843438270693107931115592518553712627106843892779377409087775321630646426715164949684440227897036327238489785074005126379145396514647047679836971121327495369829580616734447817931915332285633152646392797290279269868510097952187384498947069365092900008517094154079630339778787828646307424784148570783062085315550568921274311139796078242589336266370903149373093735027484903350228932854469

def decrypt() :
    X = c1*n2*n3*modInverse(n2*n3, n1) + c2*n1*n3*modInverse(n1*n3, n2) + c3*n1*n2*modInverse(n1*n2, n3)
    pt = X % (n1*n2*n3)
    print(pt)
    M = findCubeRoot(pt)
    print(M)
    print("\n")
    n = findQuadratic(1, M, M)
    print(n)
    coded = long_to_bytes(n)
    print(coded.decode())
    """
    for y in range(M // 2):
        if 4 * (y ** 2) + 521 * y + 47829 == M:
            coded = long_to_byte(y)
            print(coded.decode())
            break
    print("not found")
    """

def modInverse(a, m) :
    m0 = m
    y = 0
    x = 1

    if (m == 1) :
        return 0
    
    while (a > 1):
        q = a // m
        t = m
        m = a % m
        a = t
        t = y

        y = x - q * y
        x = t
    
    if (x < 0):
        x = x + m0
    
    return x

def findCubeRoot(x) :

    high = 1
    while high ** 3 <= x:
        high *= 2
    low = high // 2
    while low < high:
        middle = (low + high) // 2
        if low < middle and middle**3 < x:
            low = middle
        elif high > middle and middle**3 > x:
            high = middle
        else:
            return middle
    return middle + 1

def findQuadratic(low, high, ceiling):
    if (high<low):
        return -1
    mid = (low + (high - low) // 2)
    if (4*(mid**2) + 521*mid + 47829 == ceiling):
        return mid
    if (4*(mid**2) + 521*mid + 47829 > ceiling):
        return findQuadratic(low, mid-1, ceiling)
    if (4*(mid**2) + 521*mid + 47829 < ceiling):
        return findQuadratic(mid+1, high, ceiling)
    else:
        return -1


decrypt()